import random
import unittest

from .defaults import MAX_RETX_ATTEMPTS, SENDER_IRTO, SENDER_MSS
from .messages import ReceiverMessage
from .sender import Sender
from .wrap32 import Wrap32

isn = random.getrandbits(32)
irto = random.randint(10, 10000)
win = 137


class TestSenderConnect(unittest.TestCase):

    def test_syn_sent_after_first_push(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)

    def test_syn_acked(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.sequence_numbers_in_flight(), 0)

    def test_syn_wrong_ack(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.sequence_numbers_in_flight(), 1)

    def test_syn_acked_data(self):
        test = Sender(isn=isn)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abcdefgh')
        test.fill()
        test.tick(1)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(msg.payload, b'abcdefgh')
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 9))
        self.assertEqual(test.sequence_numbers_in_flight(), 8)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 9), win))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 9))


class TestSenderTransmit(unittest.TestCase):

    def test_three_short_writes(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'ab')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(msg.payload, b'ab')
        test.push(b'cd')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 3))
        self.assertEqual(msg.payload, b'cd')
        test.push(b'abcd')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 5))
        self.assertEqual(msg.payload, b'abcd')
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 9))
        self.assertEqual(test.sequence_numbers_in_flight(), 8)

    def test_many_short_writes_continuous_acks(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        bytes_sent = 0
        for _ in range(10000):
            blen = random.randint(1, 10)
            buf = bytes(random.choices(range(97, 123), k=blen))
            self.assertEqual(test.empty_sender_message().seqno,
                             Wrap32(isn + bytes_sent + 1))
            test.push(buf)
            test.fill()
            bytes_sent += blen
            self.assertEqual(test.sequence_numbers_in_flight(), blen)
            msg = test.optional_sender_message()
            self.assertEqual(msg.seqno, Wrap32(isn + 1 + bytes_sent - blen))
            self.assertEqual(msg.payload, buf)
            self.assertEqual(test.optional_sender_message(), None)
            test.receive_receiver_message(
                ReceiverMessage(Wrap32(isn + 1 + bytes_sent), win))
            test.fill()

    def test_many_short_writes_ack_at_end(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 65000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        bytes_sent = 0
        for _ in range(1000):
            blen = random.randint(1, 10)
            buf = bytes(random.choices(range(97, 123), k=blen))
            self.assertEqual(test.empty_sender_message().seqno,
                             Wrap32(isn + bytes_sent + 1))
            test.push(buf)
            test.fill()
            bytes_sent += blen
            self.assertEqual(test.sequence_numbers_in_flight(), bytes_sent)
            msg = test.optional_sender_message()
            self.assertEqual(msg.seqno, Wrap32(isn + 1 + bytes_sent - blen))
            self.assertEqual(msg.payload, buf)
            self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.sequence_numbers_in_flight(), bytes_sent)
        test.receive_receiver_message(
            ReceiverMessage(Wrap32(isn + 1 + bytes_sent), win))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 0)

    def test_window_filling(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 3))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'01234567')
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 3)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'012')
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno,
                         Wrap32(isn + 1 + 3))
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1 + 3), 3))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 3)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'345')
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno,
                         Wrap32(isn + 1 + 6))
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1 + 6), 3))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 2)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'67')
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno,
                         Wrap32(isn + 1 + 8))
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1 + 8), 3))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        self.assertEqual(test.optional_sender_message(), None)

    def test_immediate_writes_respect_the_window(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 3))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'01')
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 2)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'01')
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno,
                         Wrap32(isn + 1 + 2))
        test.push(b'23')
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 3)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'2')
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno,
                         Wrap32(isn + 1 + 3))


class TestSenderRetx(unittest.TestCase):

    def test_retx_syn_twice_at_the_right_times_then_ack(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.tick(irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(1)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.tick(2 * irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(1)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)

    def test_retx_syn_until_too_many_retransmissions(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        for retx in range(MAX_RETX_ATTEMPTS):
            test.tick((irto << retx) - 1)
            self.assertFalse(
                test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
            self.assertEqual(test.optional_sender_message(), None)
            test.tick(1)
            self.assertFalse(
                test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
            msg = test.optional_sender_message()
            self.assertTrue(len(msg.payload) <= SENDER_MSS)
            self.assertTrue(msg.syn)
            self.assertEqual(msg.seqno, Wrap32(isn))
            self.assertEqual(len(msg.payload), 0)
            self.assertEqual(test.empty_sender_message().seqno,
                             Wrap32(isn + 1))
            self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.tick((irto << (retx + 1)) - 1)
        self.assertFalse(
            test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
        test.tick(1)
        self.assertTrue(test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)

    def test_send_some_data_till_limit(self):
        test = Sender(isn=isn, irto=irto)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        test.push(b'abcd')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(len(msg.payload), 4)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 5), win))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'efgh')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(len(msg.payload), 4)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(irto)
        self.assertFalse(
            test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(len(msg.payload), 4)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 9), win))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'ijkl')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 9))
        self.assertEqual(len(msg.payload), 4)
        for retx in range(MAX_RETX_ATTEMPTS):
            test.tick((irto << retx) - 1)
            self.assertFalse(
                test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
            self.assertEqual(test.optional_sender_message(), None)
            test.tick(1)
            self.assertFalse(
                test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
            msg = test.optional_sender_message()
            self.assertTrue(len(msg.payload) <= SENDER_MSS)
            self.assertEqual(msg.seqno, Wrap32(isn + 9))
            self.assertEqual(len(msg.payload), 4)
            self.assertEqual(test.sequence_numbers_in_flight(), 4)
        test.tick((irto << (retx + 1)) - 1)
        self.assertFalse(
            test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)
        test.tick(1)
        self.assertTrue(test.consecutive_retransmissions() > MAX_RETX_ATTEMPTS)


class TestSenderWin(unittest.TestCase):

    def test_initial_receier_advertised_window_is_respected(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 4))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'abcdefg')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'abcd')
        self.assertEqual(test.optional_sender_message(), None)

    def test_immediate_window_is_respected(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 6))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'abcdefg')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'abcdef')
        self.assertEqual(test.optional_sender_message(), None)

    def test_growth_is_exploited(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 4))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'0123456789')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'0123')
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 5), 5))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'45678')
        self.assertEqual(test.optional_sender_message(), None)

    def test_fin_flag_occupies_space_in_window(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 7))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'1234567')
        test.fill()
        test.close()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'1234567')
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 8), 1))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.payload, b'')
        self.assertEqual(test.optional_sender_message(), None)

    def test_fin_flag_occupies_space_in_window2(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 7))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'1234567')
        test.fill()
        test.close()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'1234567')
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 8))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.payload, b'')
        self.assertEqual(test.optional_sender_message(), None)

    def test_piggyback_fin_in_segment_when_space_is_available(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 3))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'1234567')
        test.fill()
        test.close()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'123')
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 8))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.payload, b'4567')
        self.assertEqual(test.optional_sender_message(), None)


class TestSenderAck(unittest.TestCase):

    def test_repeat_ack_is_ignored(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        test.push(b'a')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'a')
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)

    def test_old_ack_is_ignored(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        test.push(b'a')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'a')
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 2), win))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'b')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.payload, b'b')
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)

    def test_impossible_ackno_is_ignored(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 2), 1000))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 1)


class TestSenderClose(unittest.TestCase):

    def test_fin_sent(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        self.assertEqual(test.optional_sender_message(), None)

    def test_fin_with_data(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'hello')
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(msg.payload, b'hello')
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 7))
        self.assertEqual(test.sequence_numbers_in_flight(), 6)
        self.assertEqual(test.optional_sender_message(), None)

    def test_syn_fin(self):
        test = Sender(isn=isn)
        test.receive_receiver_message(ReceiverMessage(None, 1024))
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 2)
        self.assertEqual(test.optional_sender_message(), None)

    def test_fin_acked(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 2), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        self.assertEqual(test.optional_sender_message(), None)

    def test_fin_not_acked(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        self.assertEqual(test.optional_sender_message(), None)

    def test_fin_retx(self):
        test = Sender(isn=isn)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), win))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(SENDER_IRTO - 1)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(1)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(1)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.sequence_numbers_in_flight(), 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 2), win))
        test.fill()
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 2))
        self.assertEqual(test.optional_sender_message(), None)


class TestSenderExtra(unittest.TestCase):

    def test_timer_stays_running_when_new_segment_sent(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.tick(irto - 5)
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'def')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')
        test.tick(6)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)

    def test_retx_still_happens_when_expiration_time_not_hit_exactly(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.tick(irto - 5)
        self.assertEqual(test.optional_sender_message(), None)
        test.push(b'def')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')
        test.tick(200)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)

    def test_timer_restarts_on_ack_of_new_data(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.tick(irto - 5)
        test.push(b'def')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 4), 1000))
        test.fill()
        test.tick(irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(2)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')

    def test_timer_doesnt_restart_without_ack_of_new_data(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.tick(irto - 5)
        test.push(b'def')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        test.tick(6)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(irto * 2 - 5)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(8)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)

    def test_rto_resets_on_ack_of_new_data(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.tick(irto - 5)
        test.push(b'def')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')
        test.push(b'ghi')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 7))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'ghi')
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        test.tick(6)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(irto * 2 - 5)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(5)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(irto * 4 - 5)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 4), 1000))
        test.fill()
        test.tick(irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(2)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'def')
        self.assertEqual(test.optional_sender_message(), None)

    def test_retx_fin_segment_same_as_other(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) < SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.tick(irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(2)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) < SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')

    def test_retx_fin_only_segment_same_as_other(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 1000))
        test.fill()
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 1))
        self.assertEqual(test.sequence_numbers_in_flight(), 0)
        test.push(b'abc')
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) < SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        test.close()
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 0)
        test.tick(irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 4), 1000))
        test.fill()
        test.tick(irto - 1)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(2)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 0)
        test.tick(2 * irto - 5)
        self.assertEqual(test.optional_sender_message(), None)
        test.tick(10)
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 0)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 5))

    def test_dont_add_fin_if_exceed_receivers_window(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.push(b'abc')
        test.close()
        test.fill()
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 3))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) < SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 4))
        self.assertEqual(test.sequence_numbers_in_flight(), 3)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 2), 2))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 3), 1))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 4), 1))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 0)

    def test_dont_send_fin_if_window_is_full(self):
        test = Sender(isn=isn, irto=irto)
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.syn)
        self.assertEqual(msg.seqno, Wrap32(isn))
        self.assertEqual(len(msg.payload), 0)
        test.push(b'abc')
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 1), 3))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertEqual(msg.seqno, Wrap32(isn + 1))
        self.assertEqual(len(msg.payload), 3)
        self.assertEqual(msg.payload, b'abc')
        self.assertEqual(test.optional_sender_message(), None)
        self.assertEqual(test.empty_sender_message().seqno, Wrap32(isn + 4))
        self.assertEqual(test.sequence_numbers_in_flight(), 3)
        test.close()
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 2), 2))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 3), 1))
        test.fill()
        self.assertEqual(test.optional_sender_message(), None)
        test.receive_receiver_message(ReceiverMessage(Wrap32(isn + 4), 1))
        test.fill()
        msg = test.optional_sender_message()
        self.assertTrue(len(msg.payload) <= SENDER_MSS)
        self.assertTrue(msg.fin)
        self.assertEqual(msg.seqno, Wrap32(isn + 4))
        self.assertEqual(len(msg.payload), 0)


if __name__ == '__main__':
    unittest.main()
